// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// DP
List DP(List parameters, double M, long N_truncated, long N_sample, bool CDP);
RcppExport SEXP _SBMTrees_DP(SEXP parametersSEXP, SEXP MSEXP, SEXP N_truncatedSEXP, SEXP N_sampleSEXP, SEXP CDPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< double >::type M(MSEXP);
    Rcpp::traits::input_parameter< long >::type N_truncated(N_truncatedSEXP);
    Rcpp::traits::input_parameter< long >::type N_sample(N_sampleSEXP);
    Rcpp::traits::input_parameter< bool >::type CDP(CDPSEXP);
    rcpp_result_gen = Rcpp::wrap(DP(parameters, M, N_truncated, N_sample, CDP));
    return rcpp_result_gen;
END_RCPP
}
// update_DP_normal
List update_DP_normal(NumericMatrix X, List tau, double L, double U);
RcppExport SEXP _SBMTrees_update_DP_normal(SEXP XSEXP, SEXP tauSEXP, SEXP LSEXP, SEXP USEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< List >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type U(USEXP);
    rcpp_result_gen = Rcpp::wrap(update_DP_normal(X, tau, L, U));
    return rcpp_result_gen;
END_RCPP
}
// DP_sampler
List DP_sampler(long N, List& parameters);
RcppExport SEXP _SBMTrees_DP_sampler(SEXP NSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< long >::type N(NSEXP);
    Rcpp::traits::input_parameter< List& >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(DP_sampler(N, parameters));
    return rcpp_result_gen;
END_RCPP
}
// bart_train
SEXP bart_train(NumericMatrix X, NumericVector Y, long nburn, long npost, bool verbose);
RcppExport SEXP _SBMTrees_bart_train(SEXP XSEXP, SEXP YSEXP, SEXP nburnSEXP, SEXP npostSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< long >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< long >::type npost(npostSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(bart_train(X, Y, nburn, npost, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sequential_imputation_cpp
List sequential_imputation_cpp(NumericMatrix X, NumericVector Y, LogicalVector type, NumericMatrix Z, CharacterVector subject_id, LogicalMatrix R, bool binary_outcome, int nburn, int npost, int skip, bool verbose, bool CDP_residual, bool CDP_re, Nullable<long> seed, double tol, int ncores, int ntrees, bool fit_loss, int resample, double pi_CDP);
RcppExport SEXP _SBMTrees_sequential_imputation_cpp(SEXP XSEXP, SEXP YSEXP, SEXP typeSEXP, SEXP ZSEXP, SEXP subject_idSEXP, SEXP RSEXP, SEXP binary_outcomeSEXP, SEXP nburnSEXP, SEXP npostSEXP, SEXP skipSEXP, SEXP verboseSEXP, SEXP CDP_residualSEXP, SEXP CDP_reSEXP, SEXP seedSEXP, SEXP tolSEXP, SEXP ncoresSEXP, SEXP ntreesSEXP, SEXP fit_lossSEXP, SEXP resampleSEXP, SEXP pi_CDPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type type(typeSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type subject_id(subject_idSEXP);
    Rcpp::traits::input_parameter< LogicalMatrix >::type R(RSEXP);
    Rcpp::traits::input_parameter< bool >::type binary_outcome(binary_outcomeSEXP);
    Rcpp::traits::input_parameter< int >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< int >::type npost(npostSEXP);
    Rcpp::traits::input_parameter< int >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type CDP_residual(CDP_residualSEXP);
    Rcpp::traits::input_parameter< bool >::type CDP_re(CDP_reSEXP);
    Rcpp::traits::input_parameter< Nullable<long> >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< int >::type ntrees(ntreesSEXP);
    Rcpp::traits::input_parameter< bool >::type fit_loss(fit_lossSEXP);
    Rcpp::traits::input_parameter< int >::type resample(resampleSEXP);
    Rcpp::traits::input_parameter< double >::type pi_CDP(pi_CDPSEXP);
    rcpp_result_gen = Rcpp::wrap(sequential_imputation_cpp(X, Y, type, Z, subject_id, R, binary_outcome, nburn, npost, skip, verbose, CDP_residual, CDP_re, seed, tol, ncores, ntrees, fit_loss, resample, pi_CDP));
    return rcpp_result_gen;
END_RCPP
}
// BMTrees_mcmc
List BMTrees_mcmc(NumericMatrix X, NumericVector Y, Nullable<NumericMatrix> Z, CharacterVector subject_id, LogicalVector obs_ind, bool binary, long nburn, long npost, bool verbose, bool CDP_residual, bool CDP_re, Nullable<long> seed, double tol, long ntrees, int resample, double pi_CDP);
RcppExport SEXP _SBMTrees_BMTrees_mcmc(SEXP XSEXP, SEXP YSEXP, SEXP ZSEXP, SEXP subject_idSEXP, SEXP obs_indSEXP, SEXP binarySEXP, SEXP nburnSEXP, SEXP npostSEXP, SEXP verboseSEXP, SEXP CDP_residualSEXP, SEXP CDP_reSEXP, SEXP seedSEXP, SEXP tolSEXP, SEXP ntreesSEXP, SEXP resampleSEXP, SEXP pi_CDPSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Nullable<NumericMatrix> >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type subject_id(subject_idSEXP);
    Rcpp::traits::input_parameter< LogicalVector >::type obs_ind(obs_indSEXP);
    Rcpp::traits::input_parameter< bool >::type binary(binarySEXP);
    Rcpp::traits::input_parameter< long >::type nburn(nburnSEXP);
    Rcpp::traits::input_parameter< long >::type npost(npostSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type CDP_residual(CDP_residualSEXP);
    Rcpp::traits::input_parameter< bool >::type CDP_re(CDP_reSEXP);
    Rcpp::traits::input_parameter< Nullable<long> >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< long >::type ntrees(ntreesSEXP);
    Rcpp::traits::input_parameter< int >::type resample(resampleSEXP);
    Rcpp::traits::input_parameter< double >::type pi_CDP(pi_CDPSEXP);
    rcpp_result_gen = Rcpp::wrap(BMTrees_mcmc(X, Y, Z, subject_id, obs_ind, binary, nburn, npost, verbose, CDP_residual, CDP_re, seed, tol, ntrees, resample, pi_CDP));
    return rcpp_result_gen;
END_RCPP
}
// update_Covariance
NumericMatrix update_Covariance(NumericMatrix B, NumericMatrix Mu, NumericMatrix inverse_wishart_matrix, double df, long N_subject);
RcppExport SEXP _SBMTrees_update_Covariance(SEXP BSEXP, SEXP MuSEXP, SEXP inverse_wishart_matrixSEXP, SEXP dfSEXP, SEXP N_subjectSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type B(BSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Mu(MuSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type inverse_wishart_matrix(inverse_wishart_matrixSEXP);
    Rcpp::traits::input_parameter< double >::type df(dfSEXP);
    Rcpp::traits::input_parameter< long >::type N_subject(N_subjectSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Covariance(B, Mu, inverse_wishart_matrix, df, N_subject));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SBMTrees_DP", (DL_FUNC) &_SBMTrees_DP, 5},
    {"_SBMTrees_update_DP_normal", (DL_FUNC) &_SBMTrees_update_DP_normal, 4},
    {"_SBMTrees_DP_sampler", (DL_FUNC) &_SBMTrees_DP_sampler, 2},
    {"_SBMTrees_bart_train", (DL_FUNC) &_SBMTrees_bart_train, 5},
    {"_SBMTrees_sequential_imputation_cpp", (DL_FUNC) &_SBMTrees_sequential_imputation_cpp, 20},
    {"_SBMTrees_BMTrees_mcmc", (DL_FUNC) &_SBMTrees_BMTrees_mcmc, 16},
    {"_SBMTrees_update_Covariance", (DL_FUNC) &_SBMTrees_update_Covariance, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_SBMTrees(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
